"Git"
- 형상 기억 및 버전 관리 툴
- 로컬 컴퓨터 내 사용할 수 있는 프로그램
- Git 공식 사이트 다운로드
- 로컬 컴퓨터 > 작업 폴더 생성

로컬 컴퓨터에 Git 소유주 정보 등록
> cmd (관리자 모드) 접속
> git config --global user.name "github name 정보"
> git config --global user.email "github email 정보"
> git config --list

> 신규 생성된 작업 폴더
> pure data (index.html)
> git init (버전 관리를 위한 초기 세팅 명령어)
> staging area / repository 사용 가능
> pure data 상태에서 untracked data 상태로 변경
> git add . (untracked data를 staging area에 보관)
> git status (보관 상태 확인)
> staging area는 임시 저장 공간 (unmodified data)
> git commit -m "000000" (staging area에서 repository로 이동)
> 실제 형상 및 버전 관리를 하는 repository

- 로컬 컴퓨터에 존재하는 해당 데이터는 협업 개발자들이 볼 수 없음



"GitHub"
- 로컬 컴퓨터에 관리되고 있는 데이터를 원격 repository에 저장해서
  보관,관리,저장,공유하는 Hub 역할을 하는 Cloud Platform Service



"Git & GitHub 연결 방법"
> 로컬 컴퓨터 터미널
> git remote add origin "github repository 주소"
> git remote -v 
> fetch ( ) // pull ( ) 정상적으로 출력되면 연결된 것
> git push origin master
> 로컬 컴퓨터 데이터를 GitHub repositoy로 전송



"gitHub의 데이터를 받는 법"
- 내려받을 repository에 접속 후 우측 상단 "code"에서 압축 파일 받기

- 로컬 컴퓨터에 신규 폴더 생성 후 해당 폴더에서 Visual Studio Code 오픈
> git clone github repository 주소

- 로컬 컴퓨터에 신규 폴더 생성 후 해당 폴더에서 Visual Studio Code 오픈
> git init
> git pull github repository 주소



"Git Fork"
- 타인의 GitHub 내 repository를 즐겨찾기처럼 내 repository에 가져옴
- 타인의 데이터를 내가 더 좋은 데이터로 발전시킬 수 있도록 하는 목적

"Branch"
- 최상위 repository 폴더 안에 하위 세부 폴더

예) company-Project repository
> master : CEO 전용 Branch
> freshman : freshman 전용 Branch
> git checkout -b freshman : 새로운 Branch 생성
> git add .
> git commit -m "freshman first commit"
> git push origin freshman



일반 구조 선택자
&:first-child